{"version":3,"sources":["assets/logo.png","components/blok/Blok.js","components/header/Header.js","containers/NewInput/NewInput.js","containers/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","Blok","props","rezultati","map","el","key","indexOf","className","team","Header","Container","fluid","Row","Col","sm","width","height","src","logo","alt","NewInput","miUpdate","event","x","target","value","game","zvao","setState","mi","vi","isZvanjaEmpty","state","zvanja","zvanjaUpdate","y","console","log","id","parseInt","met","Modal","show","this","onHide","action","closeButton","Title","Body","InputGroup","FormControl","type","onChange","placeholder","teams","Footer","Button","variant","onClick","React","Component","App","inputShow","newInpButton","size","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.79977a6a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ec79c98b.png\";","import React from 'react';\r\n\r\nimport './Blok.css';\r\n\r\nexport default function Blok(props) {\r\n\r\n    let rezultati;\r\n    rezultati = props.rezultati.map(el => {\r\n        return (\r\n            <p key={props.rezultati.indexOf(el)}>\r\n                {el}\r\n                <br />\r\n            </p>\r\n        )\r\n    })\r\n\r\n    return(\r\n        <span className=\"Blok\">\r\n            <p className=\"title\">{props.team}</p>\r\n            <hr />\r\n            {rezultati}\r\n        </span>\r\n    )\r\n}","import React from 'react';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nimport './Header.css';\r\n\r\nimport logo from '../../assets/logo.png';\r\n\r\nexport default function Header(){\r\n    return (\r\n        <Container fluid>\r\n            <Row className=\"Background\">\r\n                <Col sm={1}><img width={64} height={64} src={logo} alt=\"logo\"/></Col>\r\n                <Col sm={3}><h1 className=\"title1\">Bela Blok</h1></Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}","import React from 'react';\r\n\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { FormControl } from 'react-bootstrap';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nexport default class NewInput extends React.Component {\r\n    constructor(props){\r\n        super (props);\r\n        this.state = {\r\n            mi: \"\",\r\n            vi: \"\",\r\n            zvanja: {\r\n                mi: \"\",\r\n                vi: \"\"\r\n            }\r\n        }\r\n    }\r\n\r\n    miUpdate = (event) => {\r\n        let x = event.target.value;\r\n        //validation\r\n        const game = this.props.game\r\n        const zvao = this.props.zvao\r\n\r\n        this.setState({ mi: x, vi: 162-x })\r\n    }\r\n\r\n    isZvanjaEmpty = () => {\r\n        if (this.state.zvanja.mi !== \"\" || this.state.zvanja.vi !== \"\") {\r\n            if (this.state.zvanja.mi === \"\"){\r\n                this.setState({ zvanja: { mi: 0 } })\r\n            } else if (this.state.zvanja.mi === \"\"){\r\n                this.setState({ zvanja: { vi: 0 } })\r\n            }\r\n        }\r\n    }\r\n\r\n    zvanjaUpdate = (event) => {\r\n        let y = event.target.value;\r\n        console.log(y, typeof(y))\r\n        \r\n\r\n        switch (event.target.id) {\r\n            case \"zvanjaMi\":\r\n                this.setState({ zvanja: { mi: parseInt(y), vi: this.state.zvanja.vi } })\r\n                break;\r\n            case \"zvanjaVi\":\r\n                this.setState({ zvanja: { vi: parseInt(y), mi: this.state.zvanja.mi } })\r\n                break;\r\n            default:\r\n                console.log(\"PogreÅ¡ka\");\r\n        }\r\n        \r\n        \r\n    }\r\n\r\n\r\n\r\n    met = () => {\r\n        console.log(\"there\")\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Modal show={this.props.show} onHide={this.props.action}>\r\n                <Modal.Header closeButton>\r\n                <Modal.Title>Novi Unos</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <h2>Ukupno zvanja:</h2>\r\n                    <p>Nepotrebno ispunjavati ako nema zvanja</p>\r\n                    <InputGroup >\r\n                        <FormControl type=\"number\" onChange={this.zvanjaUpdate} id=\"zvanjaMi\" value={this.state.zvanja.mi} placeholder=\"Mi\"/>\r\n                        <FormControl type=\"number\" onChange={this.zvanjaUpdate} id=\"zvanjaVi\" value={this.state.zvanja.vi} placeholder=\"Vi\" />\r\n                    </InputGroup>\r\n                        <hr />\r\n                        <h3>Igra: {162 + this.state.zvanja.mi + this.state.zvanja.vi}</h3>\r\n                        <hr />                        \r\n                        <FormControl onChange={this.miUpdate} value={this.state.mi} placeholder={this.props.teams[0]}/>\r\n                        <FormControl onChange={this.met} value={this.state.vi} placeholder={this.props.teams[1]}/>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={this.props.action}>\r\n                    Zatvori\r\n                </Button>\r\n                <Button variant=\"primary\" onClick={this.props.action}>\r\n                    Spremi Unos\r\n                </Button>\r\n                </Modal.Footer>\r\n            </Modal>  \r\n        )\r\n    }\r\n}","import React from 'react';\nimport './App.css';\n\n\nimport Button from 'react-bootstrap/Button'\n\nimport Blok from '../../components/blok/Blok';\nimport Header from '../../components/header/Header';\nimport NewInput from '../NewInput/NewInput';\n\nexport default class App extends React.Component {\n  state = {\n    mi: [100, 43, 54, 323],\n    vi: [100, 43, 54, 323],\n    teams: [\"mi\", \"vi\"],\n    inputShow: false,\n  }\n\n  newInpButton = () => {\n    this.setState({ inputShow: !this.state.inputShow })\n  }\n\n  render() {\n\n    return (\n        <div className=\"Parent\">\n          <Header />\n          <br />\n          <Button size=\"lg\">\n            Nova Partija\n          </Button>\n      \t  <br /><br />\n          <Button onClick={this.newInpButton} size=\"lg\">\n            Novi Unos\n          </Button>\n          <br /><br />\n          <Button  size=\"lg\">\n            Spremi partiju\n          </Button>\n          <br /><br />\n          {\n            this.state.inputShow\n            ?\n            <NewInput teams={this.state.teams} show={this.state.inputShow} action={this.newInpButton}/>          \n            :\n            null\n          }\n\n          <Blok team=\"mi\" rezultati={this.state.mi}/>\n          <Blok team=\"vi\" rezultati={this.state.vi}/>\n\n        </div>\n    )\n  }\n} \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport \"shards-ui/dist/css/shards.min.css\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}